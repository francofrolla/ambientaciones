if(length(grasslandspais)==0){grasslandspais<-0}
if(length(treecropslandspais)==0){treecropslandspais<-0}
if(length(Shrubslands)==0){Shrubslands<-0}
dataset[1,1]<-as.character(listapaises$COUNTRY[i])
dataset[1,2]<-as.numeric(croplandspais)
dataset[1,3]<-as.numeric(grasslandspais)
dataset[1,4]<-as.numeric(treecropslandspais)
dataset[1,5]<-as.numeric(Shrubslands)
colnames(dataset)<-c("pais","croplands","grasslands","treecroplands","Shrubslands")
print(dataset)
calculoareapais<-function(listapaises,i){
dataset<-matrix(nrow=1,ncol=5)
print(as.character(listapaises$COUNTRY[i]))
pais<-paises[paises$COUNTRY == listapaises$COUNTRY[i],]
#pais<-paises[paises$COUNTRY == sudamerica[i],]
landusepais<-crop(landuseplaneta,pais)
landusepais<-mask(landusepais,pais)
datos<-tapply(area(landusepais, na.rm=TRUE, weights=FALSE), landusepais[], sum)
clases<-attributes(datos)$dimnames[[1]]
valores<-unname(datos)
framearea<-data.frame(clases,valores)
croplandspais<-0
if(length(framearea[framearea==10,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==10,]$valores}
if(length(framearea[framearea==11,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==11,]$valores}
if(length(framearea[framearea==20,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==20,]$valores}
if(length(framearea[framearea==30,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==30,]$valores}
if(length(framearea[framearea==40,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==40,]$valores}
#croplandspais<-(framearea[framearea==10,]$valores + framearea[framearea==11,]$valores + framearea[framearea==20,]$valores + framearea[framearea==30,]$valores + framearea[framearea==40,]$valores)
grasslandspais<-framearea[framearea==130,]$valores
treecropslandspais<- framearea[framearea==12,]$valores
Shrubslands<-framearea[framearea==120,]$valores
if(length(croplandspais)==0){croplandspais<-0}
if(length(grasslandspais)==0){grasslandspais<-0}
if(length(treecropslandspais)==0){treecropslandspais<-0}
if(length(Shrubslands)==0){Shrubslands<-0}
dataset[1,1]<-as.character(listapaises$COUNTRY[i])
dataset[1,2]<-as.numeric(croplandspais)
dataset[1,3]<-as.numeric(grasslandspais)
dataset[1,4]<-as.numeric(treecropslandspais)
dataset[1,5]<-as.numeric(Shrubslands)
colnames(dataset)<-c("pais","croplands","grasslands","treecroplands","Shrubslands")
print(dataset)
return(dataset)
}
listapaises
calculoareapais(listapaises,74)
calculoareapais<-function(listapaises,i){
dataset<-matrix(nrow=1,ncol=5)
print(as.character(listapaises$COUNTRY[i]))
pais<-paises[paises$COUNTRY == listapaises$COUNTRY[i],]
#pais<-paises[paises$COUNTRY == sudamerica[i],]
landusepais<-crop(landuseplaneta,pais)
landusepais<-mask(landusepais,pais)
datos<-tapply(area(landusepais, na.rm=TRUE, weights=FALSE), landusepais[], sum)
clases<-attributes(datos)$dimnames[[1]]
valores<-unname(datos)
framearea<-data.frame(clases,valores)
croplandspais<-0
if(length(framearea[framearea==10,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==10,]$valores}
if(length(framearea[framearea==11,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==11,]$valores}
if(length(framearea[framearea==20,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==20,]$valores}
if(length(framearea[framearea==30,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==30,]$valores}
if(length(framearea[framearea==40,]$valores)>0){croplandspais<-croplandspais+framearea[framearea==40,]$valores}
#croplandspais<-(framearea[framearea==10,]$valores + framearea[framearea==11,]$valores + framearea[framearea==20,]$valores + framearea[framearea==30,]$valores + framearea[framearea==40,]$valores)
grasslandspais<-framearea[framearea==130,]$valores
treecropslandspais<- framearea[framearea==12,]$valores
Shrubslands<-framearea[framearea==120,]$valores
if(length(croplandspais)==0){croplandspais<-0}
if(length(grasslandspais)==0){grasslandspais<-0}
if(length(treecropslandspais)==0){treecropslandspais<-0}
if(length(Shrubslands)==0){Shrubslands<-0}
dataset[1,1]<-as.character(listapaises$COUNTRY[i])
dataset[1,2]<-as.numeric(croplandspais)
dataset[1,3]<-as.numeric(grasslandspais)
dataset[1,4]<-as.numeric(treecropslandspais)
dataset[1,5]<-as.numeric(Shrubslands)
colnames(dataset)<-c("pais","croplands","grasslands","treecroplands","Shrubslands")
print(dataset)
return(dataset)
}
listapaises
calculoareapais(listapaises,201)
calculoareapais(listapaises,202)
listapaises
calculoareapais(listapaises,23)
library(shiny); runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
inter1
densidad<-c()
Nbase<-c()
denmaiz<-strsplit(denmaiz," ")
densidad<-denmaiz[[1]]
dennbase<-strsplit(dennbase," ")
Nbase<-dennbase[[1]]
densidad
Nbase
dennbasevariable<-strsplit(dennbasevariable," ")
dennbasevariable<-dennbasevariable[[1]]
dennbasevariable
unique(inter1@data$Zonas)
length(densidad)
length(unique(inter1@data$Zonas)
)
if (length(densidad) < length(unique(inter1@data$Zonas))){
print("FALTAN DATOS DE DENSIDAD, se ingresan datos por defecto")
faltantes<-rep(99999,length(unique(inter1@data$Zonas))-length(densidad))
densidad<-c(densidad,faltantes)
if(densidad[1]=="Densidades..."){ densidad[1]<-99999}
}
densidad
densidad<-denmaiz[[1]]
densidad
denmaiz
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
print(denmaiz)
denmaiz<-strsplit(denmaiz," ")
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
denmaiz2
denmaiz<-strsplit(denmaiz," ")
densidad<-denmaiz[[1]]
densidad
denmaiz
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
denmaiz2
denmaiz<-strsplit(denmaiz," ")
densidad<-denmaiz[[1]]
densidad
densidad<-denmaiz2[[1]]
densidad
length(densidad)
length(unique(inter1@data$Zonas)
)
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
a=2
b=3
list(a,b)
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
rescate
densidad<-c()
Nbase<-c()
rescate[[5]]
denmaiz<-rescate[[5]]
densidad<-denmaiz[[1]]
densidad
densidad<-strsplit(densidad," ")
densidad
densidad<-denmaiz[[1]]
densidad
denmaiz<-rescate[[5]]
denmaiz
densidad<-denmaiz[[1]]
densidad
strsplit(densidad," ")
densidad
densidad<-strsplit(densidad," ")
densidad
densidad[[1]]
densidad<-strsplit(densidad," ")[[1]]
densidad<-densidad[[1]]
densidad
length(densidad)
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
rescate
rescate[[5]]
denmaiz<-rescate[[5]]
denmaiz
densida-denmaizd
densida<-denmaiz
densidad<-denmaiz
densidad
densidad<-strsplit(densidad," ")
densidad
densidad[[1]]
densidad<-densidad[[1]]
print(densidad)
rescate[[5]]
rescate
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app2.R')
a="Zona 1"
b= 6
as.numeric(a)
is.na(as.numeric(a))
vari<-list(a,b)
vari
vari[[1]]
length(vari)
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
rescate
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
variables
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
variables
rescate
variables
i=1
is.na(as.numeric(variables[[i]]))
for (i in length(variables)){
if(is.na(as.numeric(variables[[i]]))){
variables[[i]]<-9999
}
else {
variables[[i]]<-as.numeric(variables[[i]])
}
}
variables
for (i in 1:length(variables)){
if(is.na(as.numeric(variables[[i]]))){
variables[[i]]<-9999
}
else {
variables[[i]]<-as.numeric(variables[[i]])
}
}
variables
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
rescate
variables
rescate
rescate[[4]]
rescate[[4]]
variables<-rescate[[4]]
variables
densidad<-c(variables[[1]],variables[[2]],variables[[3]],variables[[4]],variables[[5]])
dennbasevariable<-c(variables[[6]],variables[[7]],variables[[8]],variables[[9]],variables[[10]])
Nbase<-c(variables[[11]],variables[[12]],variables[[13]],variables[[14]],variables[[15]])
densidad
dennbasevariable
Nbase
densidad <- as.numeric(as.character(densidad))
Nbase <- as.numeric(as.character(Nbase))
dennbasevariable <- as.numeric(as.character(dennbasevariable))
densidad
fuente
fuente <- "kg N"
Nbase <- as.character(Nbase)
dennbasevariable <- as.character(dennbasevariable)
Nbase
dennbasevariable
inter1@data$densidad_siembra
inter1@data$densidad_siembra<-seq(1,nrow(inter1@data))
inter1@data$nbase<-seq(1,nrow(inter1@data))
inter1@data$densidad_siembra
inter1@data$nbase
inter1@data$Zonas
zonas <- unique(inter1@data$Zonas)
zonas
inter1@data
zonas <- unique(inter1@data$Zonas)
while(length(zonas)<5){zonas<-c(zonas,9999)}
zonas
zonas
densidad
densidad[1]
if(inter1@data[i,3] == zonas[5]){inter1@data[i,5]<-densidad[5]}
densidad[5]
Nbase[6]
Nbase
Nbase[5]
inter1@data
inter1@data[i,3]
i
zonas
i=6
inter1@data[i,4]
Nbase[1]
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
inter1@data
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
inter1@data
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
lote@data
dennbasevariable
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
lote@data$densidad_siembra
num_densidades<-length(unique(lote@data$densidad_siembra))
num_densidades
lote@data$densidad_siembra
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
ubicacion
myshp
plot(myshp)
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
zonas
lote@data
runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app3.R')
shiny::runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto')
library(shiny); runApp('C:/Users/francofrolla/Google Drive/amazon ec2/Monsanto/app4.R')
bar <- function() {print('ATENCION: Hubo un error que detuvo la ejecucion del programa')}
ambientes<-tryCatch(multispatipca(),  error = function(e){ bar()} )
mapa_vectorizado<-tryCatch(vectorizacion(ambientes,7,0.5,poligono,5),  error = function(e){ bar()} )
writeOGR(mapa_vectorizado, layer = "mapa_vectorizado", dsn=getwd(), driver="ESRI Shapefile",overwrite_layer=TRUE)
vectorizacion<-function(ambientes,n_ambientes,superficie_minima,poligono,celda){
#Controlo si se ejecuto multispatipca
if(!exists("ambientes")){stop("Primero debe ejecutar multispatipca")}
#Controlo valor logico de ventana de suavizado
if(celda != 3 && celda != 5 && celda != 9 && celda != 13){
stop("No se pueden hacer ese suavizado, valores posibles 3,5,9,13")
}
if(n_ambientes == 2){
rasterambientes<- raster(ambientes[[1]],layer=1)
}
if(n_ambientes == 3){
rasterambientes<- raster(ambientes[[1]],layer=2)
}
if(n_ambientes == 4){
rasterambientes<- raster(ambientes[[1]],layer=3)
}
if(n_ambientes == 5){
rasterambientes<- raster(ambientes[[1]],layer=4)
}
if(n_ambientes == 6){
rasterambientes<- raster(ambientes[[1]],layer=5)
}
if(n_ambientes == 7){
rasterambientes<- raster(ambientes[[1]],layer=6)
}
if(n_ambientes != 2 && n_ambientes != 3 && n_ambientes != 4 && n_ambientes != 5 && n_ambientes != 6 && n_ambientes != 7){
stop("No se pueden hacer ese cantidad de ambientes, valores posibles 2,3,4,5,6,7")
}
#Existe la superficie minima
if(!exists("superficie_minima")){superficie_minima<-0.5}
ambientesvectorizados<-rasterToPolygons(rasterambientes,na.rm=TRUE,dissolve=TRUE)
ambientesvectorizados<-disaggregate (ambientesvectorizados)
#Remuevo aquella areas menores a 1/2 ha
ambientesvectorizados@data$area<-area(ambientesvectorizados)/10000
ambientesvectorizados<-ambientesvectorizados[ambientesvectorizados@data$area>superficie_minima,]
proj4string(ambientesvectorizados) <- crs(poligono)
#Convierto a raster
r.polys <- rasterize(ambientesvectorizados[,1], ambientes[[2]],field= names(ambientesvectorizados@data)[1])
#Remuestreo la capa para ver donde nos quedamos sin datos.
#Grilla para muestreas capas
#Genero grilla para hacer los clusters
poligono<-readOGR("Lote1.shp")
grid <- makegrid(poligono, cellsize = 5)
coordinates(grid)<-c("x1","x2")
proj4string(grid) <- crs(poligono)
recortegrilla <- raster::crop(grid,poligono)
data<-try(extract(r.polys,recortegrilla),silent=TRUE)
#Remuevo outliers
datos<-data.frame(data,recortegrilla@coords[,1],recortegrilla@coords[,2])
colnames(datos)<-c("Ambientes","x","y")
datos<-na.omit(datos)
#teniendo los datos a una escala de muestreo inferior a la original, rasterizo, suavizo
#y por ultimo vectorizo.
amb_raster <- SpatialPixelsDataFrame(points = datos[c("x", "y")], data =datos)
amb_raster<- raster(amb_raster,layer=1)
#Genero la ventana de suavizado
ventana<-matrix(1,nrow=celda,ncol=celda)
mapa<-focal(amb_raster[[1]],w=ventana,fun=modal,na.rm=TRUE)
#Fuerzo rellenar nulls hasta ventana maxima de 13x13
ventana<-matrix(1,nrow=13,ncol=13)
mapa<-focal(mapa,w=ventana,fun=modal,na.rm=TRUE,NAonly=TRUE)
mapa<-crop(mapa,poligono)
mapa<-mask(mapa_cortado,poligono)
mapa_vectorizado<-rasterToPolygons(mapa,na.rm=TRUE,dissolve=TRUE)
mapa_vectorizado<-raster::crop(mapa_vectorizado,poligono )
spplot(mapa_vectorizado,col.regions=viridis(100))
return(mapa_vectorizado)
}
multispatipca<-function(){
#Lllamar a todas las capas que se van a usar....
require(raster)
require(rgdal)
require(ade4)
require(spdep)
require(adespatial)
require(e1071)
setwd("C://Users//francofrolla//Google Drive//ambientaciones//datos de prueba")
cea30<-raster("CEa30cm.tif")
cea90<-raster("CEa90cm.tif")
dem<-raster("DEM.tif")
ndvi<-raster("NDVI_Media.tif")
radarvv<-raster("RadarVH.tif")
radarvh<-raster("RadarVV.tif")
twi <-raster("TWI.tif")
listacapas<-list(cea30,cea90,dem,ndvi,radarvv,radarvh,twi)
poligono<-readOGR("Lote1.shp")
#FUNCION DE CONTROL, controlar el SRC de la primera capas con las restantes.
for (i in 1:length(listacapas)){
crs_control<-projection(listacapas[[1]])
if(crs_control != projection(poligono)){print("el poligono y la capa raster no son iguales");stop("CRS: diferente crs para poligonos y raster, por favor reproyecte las capas a un mismo sistema en metros")}
if(crs_control == "+proj=longlat +datum=WGS84 +no_defs"){print("una de las esta en grados");stop("CRS: Error en proyeccion capa en grados, por favor reproyecte las capas a un mismo sistema en metros")}
if(crs_control != projection(listacapas[[i]])){print("una de las capas tiene diferente SRC");stop("CRS: Error en proyeccion en una de las capas, por favor reproyecte las capas a un mismo sistema en metros")}
}
#tomo la primer capa y la resampleo
for (i in 2:length(listacapas)){
listacapas[[i]]<-resample(listacapas[[i]],listacapas[[1]])
}
#Grilla para muestreas capas
#Genero grilla para hacer los clusters
grid <- makegrid(poligono, cellsize = 10)
coordinates(grid)<-c("x1","x2")
proj4string(grid) <- crs(poligono)
recortegrilla <- raster::crop(grid,poligono)
#Extraigo los valores de las capas y genero data.frame
nombres<-c("")
matrizdatos<-seq(1,length(recortegrilla),1)
for (i in 1:length(listacapas)){
print(i)
data<-extract(listacapas[[i]],recortegrilla)
matrizdatos<-cbind(matrizdatos,data)
nombre<-listacapas[[i]]@data@names
nombres<-c(nombres,nombre)
}
datos<-data.frame(matrizdatos,recortegrilla@coords[,1],recortegrilla@coords[,2])
colnames(datos)<-c(nombres,"x","y")
datos<-na.omit(datos)
#controlo que halla datos
if(nrow(datos)<1){stop("No se generaron datos en la grilla")}
#multispati-pca
#datos sin x e y
datospca<-datos[,1:(ncol(datos)-2)]
datospca<-datospca[,2:ncol(datospca)]
pca <- dudi.pca(datospca, center=T,scannf = FALSE,  nf = 5)
cord_1 <- coordinates(datos[,(ncol(datos)-1):(ncol(datos))])
gri_1 <- dnearneigh(cord_1,0,25)
lw_1 <- nb2listw(gri_1, style = "W")
ms <- multispati(pca, lw_1, scannf = F, nfposi = 5)
s.arrow(ms$c1,xax = 1, yax = 2, clabel = 1)
# Extraction of spatial principal components
sPC <- ms$li[,1:4]
PredMA <- cbind(datos,sPC)
PredMA
#
parazonificar<-data.frame(PredMA$CS1,PredMA$CS2)
#  Fuzzy k-means cluster analysis
MC_2<-cmeans(parazonificar,2,100,method="cmeans",m=1.3)
MC_3<-cmeans(parazonificar,3,100,method="cmeans",m=1.3)
MC_4<-cmeans(parazonificar,4,100,method="cmeans",m=1.3)
MC_5<-cmeans(parazonificar,7,100,method="cmeans",m=1.3)
MC_6<-cmeans(parazonificar,7,100,method="cmeans",m=1.3)
MC_7<-cmeans(parazonificar,7,100,method="cmeans",m=1.3)
# Mapas con clases delimitadas
MC_22 <-as.data.frame(MC_2$cluster)
MC_33 <-as.data.frame(MC_3$cluster)
MC_44 <-as.data.frame(MC_4$cluster)
MC_55 <-as.data.frame(MC_5$cluster)
MC_66 <-as.data.frame(MC_6$cluster)
MC_77 <-as.data.frame(MC_7$cluster)
baseMC <- cbind(datos$x,datos$y,MC_22,MC_33,MC_44,MC_55,MC_66,MC_77)
colnames(baseMC)<-c("x","y","MC2","MC3","MC4","MC5","MC6","MC7")
coordinates(baseMC) <- ~x+y
gridded(baseMC) <- T
library(viridis)
spplot(baseMC["MC2"],col.regions=viridis(100),colorkey = F)
spplot(baseMC["MC3"],col.regions=viridis(100),colorkey = F)
spplot(baseMC["MC4"],col.regions=viridis(100),colorkey = F)
spplot(baseMC["MC5"],col.regions=viridis(100),colorkey = F)
spplot(baseMC["MC6"],col.regions=viridis(100),colorkey = F)
spplot(baseMC["MC7"],col.regions=viridis(100),colorkey = F)
return(list(baseMC,listacapas[[1]],poligono))
}
ambientes<-tryCatch(multispatipca(),  error = function(e){ bar()} )
n_ambientes = 3
rasterambientes<- raster(ambientes[[1]],layer=3)
rasterambientes
ambientesvectorizados
ambientesvectorizados<-rasterToPolygons(rasterambientes,na.rm=TRUE,dissolve=TRUE)
ambientesvectorizados
plot(ambientesvectorizados)
buffer(poligono,10)
?buffer
#Grilla para muestreas capas
#Genero grilla para hacer los clusters
poligono<-readOGR("Lote1.shp")
buffer(poligono,10)
plot(buffer(poligono,10))
